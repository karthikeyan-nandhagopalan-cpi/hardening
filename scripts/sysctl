function f_sysctl {
  if [[ $LXC == "1" ]]; then
    return
  fi

  echo "[$SCRIPT_COUNT] $SYSCTL"

  cp "$SYSCTL_CONF" "$SYSCTL"

  sed -i '/net.ipv6.conf.eth0.accept_ra_rtr_pref/d' "$SYSCTL"

  for n in $($ARPBIN -n -a | awk '{print $NF}' | sort | uniq); do
    echo "net.ipv6.conf.$n.accept_ra_rtr_pref = 0" >> "$SYSCTL"
  done

  sed -i -e "s/rp_filter=.*/rp_filter = 1/" /etc/sysctl.d/*

  chmod 0600 "$SYSCTL"
  systemctl restart systemd-sysctl

  if [[ $VERBOSE == "Y" ]]; then
    systemctl status systemd-sysctl --no-pager
    echo
  fi

  ### fixing log file permissions ####

  readarray -t files < <(find /var/log/ -type f)
  for file in "${files[@]}"; do
      if basename $file | grep -qE '^.*$'; then
          chmod 0640 $file
      fi
  done

  if grep -qE "^f \/var\/log\/(btmp|wtmp|lastlog)? " /usr/lib/tmpfiles.d/var.conf; then
      sed -i --follow-symlinks "s/\(^f[[:space:]]\+\/var\/log\/btmp[[:space:]]\+\)\(\([[:digit:]]\+\)[^ $]*\)/\10640/" /usr/lib/tmpfiles.d/var.conf
      sed -i --follow-symlinks "s/\(^f[[:space:]]\+\/var\/log\/wtmp[[:space:]]\+\)\(\([[:digit:]]\+\)[^ $]*\)/\10640/" /usr/lib/tmpfiles.d/var.conf
      sed -i --follow-symlinks "s/\(^f[[:space:]]\+\/var\/log\/lastlog[[:space:]]\+\)\(\([[:digit:]]\+\)[^ $]*\)/\10640/" /usr/lib/tmpfiles.d/var.conf
  fi

########### Disable core dumps for SUID programs on  ubuntu 22 #######
if grep jammy /etc/os-release; then
        # Remediation is applicable only in certain platforms
        if [ ! -f /.dockerenv ] && [ ! -f /run/.containerenv ]; then

        # Comment out any occurrences of fs.suid_dumpable from /etc/sysctl.d/*.conf files

        for f in /etc/sysctl.d/*.conf /run/sysctl.d/*.conf /usr/local/lib/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf; do

          matching_list=$(grep -P '^(?!#).*[\s]*fs.suid_dumpable.*$' $f | uniq )
          if ! test -z "$matching_list"; then
            while IFS= read -r entry; do
              escaped_entry=$(sed -e 's|/|\\/|g' <<< "$entry")
              # comment out "fs.suid_dumpable" matches to preserve user data
              sed -i "s/^${escaped_entry}$/# &/g" $f
            done <<< "$matching_list"
          fi
        done

        #
        # Set sysctl config file which to save the desired value
        #

        SYSCONFIG_FILE="/etc/sysctl.conf"


        #
        # Set runtime for fs.suid_dumpable
        #
        /sbin/sysctl -q -n -w fs.suid_dumpable="0"

        #
        # If fs.suid_dumpable present in /etc/sysctl.conf, change value to "0"
        #	else, add "fs.suid_dumpable = 0" to /etc/sysctl.conf
        #

        # Strip any search characters in the key arg so that the key can be replaced without
        # adding any search characters to the config file.
        stripped_key=$(sed 's/[\^=\$,;+]*//g' <<< "^fs.suid_dumpable")

        # shellcheck disable=SC2059
        printf -v formatted_output "%s = %s" "$stripped_key" "0"

        # If the key exists, change it. Otherwise, add it to the config_file.
        # We search for the key string followed by a word boundary (matched by \>),
        # so if we search for 'setting', 'setting2' won't match.
        if LC_ALL=C grep -q -m 1 -i -e "^fs.suid_dumpable\\>" "${SYSCONFIG_FILE}"; then
            escaped_formatted_output=$(sed -e 's|/|\\/|g' <<< "$formatted_output")
            LC_ALL=C sed -i --follow-symlinks "s/^fs.suid_dumpable\\>.*/$escaped_formatted_output/gi" "${SYSCONFIG_FILE}"
        else
            if [[ -s "${SYSCONFIG_FILE}" ]] && [[ -n "$(tail -c 1 -- "${SYSCONFIG_FILE}" || true)" ]]; then
                LC_ALL=C sed -i --follow-symlinks '$a'\\ "${SYSCONFIG_FILE}"
            fi
            printf '%s\n' "$formatted_output" >> "${SYSCONFIG_FILE}"
        fi

        else
            >&2 echo 'Remediation is not applicable, nothing was done'
        fi
fi

  ((SCRIPT_COUNT++))
}
