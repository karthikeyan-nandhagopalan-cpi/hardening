function f_password {
  echo "[$SCRIPT_COUNT] $COMMONPASSWD, $COMMONAUTH and $PAMLOGIN"
  ### set root password ####
  echo "echo root:${ROOT_PASSWORD} | chpasswd" > root_password.sh
  chmod +x root_password.sh
  #export ROOT_PASSWORD=${ROOT_PASSWORD}
  cat root_password.sh
  grep root /etc/shadow
  sudo ./root_password.sh
  grep root /etc/shadow
  rm root_password.sh
  ### securing single user mode ####

  ## password age ###
  var_accounts_maximum_age_login_defs='365'
  var_accounts_minimum_age_login_defs='1'
  while IFS= read -r i; do
      chage -M $var_accounts_maximum_age_login_defs $i
      chage -m $var_accounts_minimum_age_login_defs $i
  done <   <(awk -v var="$var_accounts_maximum_age_login_defs" -F: '(/^[^:]+:[^!*]/ && ($5 > var || $5 == "")) {print $1}' /etc/shadow)
  ###### password age completed ####

  if ! grep pam_pwhistory.so "$COMMONPASSWD"; then
    sed -i '/the "Primary" block/apassword\trequired\t\t\tpam_pwhistory.so\tremember=5' "$COMMONPASSWD"
  fi

  cp ./config/pwquality.conf /etc/security/pwquality.conf
  chmod 0644 /etc/security/pwquality.conf

  if grep 'use_authtok try_first_pass sha512' "$COMMONPASSWD"; then
    sed -i 's/try_first_pass sha512.*/try_first_pass sha512 rounds=65536/' "$COMMONPASSWD"
  fi

  sed -i -E 's/(nullok|nullok_secure)//g' "$COMMONAUTH"

  if ! grep retry= "$COMMONPASSWD"; then
    echo 'password requisite pam_pwquality.so retry=3' >> "$COMMONPASSWD"
  fi

  if [ -f "$FAILLOCKCONF" ]; then
    if ! grep faillock "$COMMONAUTH"; then
      sed -i 's/^# audit$/audit/' "$FAILLOCKCONF"
      sed -i 's/^# local_users_only$/local_users_only/' "$FAILLOCKCONF"
      sed -i 's/^# deny.*/deny = 5/' "$FAILLOCKCONF"
      sed -i 's/^# fail_interval.*/fail_interval = 900/' "$FAILLOCKCONF"
      sed -i '/pam_tally.*/d' "$COMMONACCOUNT"
      sed -i 's/auth.*pam_unix.so/auth required pam_faillock.so preauth\nauth [success=1 default=ignore] pam_unix.so\nauth [default=die] pam_faillock.so authfail\nauth sufficient pam_faillock.so authsucc\n/' "$COMMONAUTH"
    fi
    if ! grep faillock "$COMMONACCOUNT"; then
      echo 'account required pam_faillock.so' >> "$COMMONACCOUNT"
    fi
  else
    if ! grep tally2 "$COMMONAUTH"; then
      sed -i '/^$/a auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900' "$COMMONAUTH"
      sed -i '/pam_tally/d' "$COMMONACCOUNT"
      else
        echo "tally2 is present"
    fi
    if ! grep tally2 "$COMMONACCOUNT"; then
      sed -i '/^$/a account required pam_tally2.so' "$COMMONACCOUNT"
    fi
  fi

  sed -i 's/pam_lastlog.so.*/pam_lastlog.so showfailed/' "$PAMLOGIN"
  sed -i 's/delay=.*/delay=4000000/' "$PAMLOGIN"
  sed -i 's/remember=5$/remember=5 use_authtok/g' "$COMMONPASSWD"
  echo "password requisite pam_pwhistory.so     remember=5 use_authtok" >> "$COMMONPASSWD"

  if ! grep jammy /etc/os-release; then
  echo "auth required pam_tally2.so onerr=fail silent audit deny=5" >> "$COMMONAUTH"
  echo "account required pam_tally2.so" >> "$COMMONACCOUNT"
  fi

########### Limit reuse of password on ubuntu 22 #######
if grep jammy /etc/os-release; then
         # Remediation is applicable only in certain platforms
         if dpkg-query --show --showformat='${db:Status-Status}\n' 'libpam-runtime' 2>/dev/null | grep -q installed; then

         var_password_pam_unix_remember='5'

         if [ -e "/etc/pam.d/common-password" ] ; then
             valueRegex="$var_password_pam_unix_remember" defaultValue="$var_password_pam_unix_remember"
             # non-empty values need to be preceded by an equals sign
             [ -n "${valueRegex}" ] && valueRegex="=${valueRegex}"
             # add an equals sign to non-empty values
             [ -n "${defaultValue}" ] && defaultValue="=${defaultValue}"

             # fix 'type' if it's wrong
             if grep -q -P "^\\s*(?"'!'"password\\s)[[:alnum:]]+\\s+[[:alnum:]]+\\s+pam_unix.so" < "/etc/pam.d/common-password" ; then
                 sed --follow-symlinks -i -E -e "s/^(\\s*)[[:alnum:]]+(\\s+[[:alnum:]]+\\s+pam_unix.so)/\\1password\\2/" "/etc/pam.d/common-password"
             fi

             # fix 'control' if it's wrong
             if grep -q -P "^\\s*password\\s+(?"'!'"\[success=[[:alnum:]].*\])[[:alnum:]]+\\s+pam_unix.so" < "/etc/pam.d/common-password" ; then
                 sed --follow-symlinks -i -E -e "s/^(\\s*password\\s+)[[:alnum:]]+(\\s+pam_unix.so)/\\1\[success=[[:alnum:]].*\]\\2/" "/etc/pam.d/common-password"
             fi

             # fix the value for 'option' if one exists but does not match 'valueRegex'
             if grep -q -P "^\\s*password\\s+\[success=[[:alnum:]].*\]\\s+pam_unix.so(\\s.+)?\\s+remember(?"'!'"${valueRegex}(\\s|\$))" < "/etc/pam.d/common-password" ; then
                 sed --follow-symlinks -i -E -e "s/^(\\s*password\\s+\[success=[[:alnum:]].*\]\\s+pam_unix.so(\\s.+)?\\s)remember=[^[:space:]]*/\\1remember${defaultValue}/" "/etc/pam.d/common-password"

             # add 'option=default' if option is not set
             elif grep -q -E "^\\s*password\\s+\[success=[[:alnum:]].*\]\\s+pam_unix.so" < "/etc/pam.d/common-password" &&
                     grep    -E "^\\s*password\\s+\[success=[[:alnum:]].*\]\\s+pam_unix.so" < "/etc/pam.d/common-password" | grep -q -E -v "\\sremember(=|\\s|\$)" ; then

                 sed --follow-symlinks -i -E -e "s/^(\\s*password\\s+\[success=[[:alnum:]].*\]\\s+pam_unix.so[^\\n]*)/\\1 remember${defaultValue}/" "/etc/pam.d/common-password"
             # add a new entry if none exists
             elif ! grep -q -P "^\\s*password\\s+\[success=[[:alnum:]].*\]\\s+pam_unix.so(\\s.+)?\\s+remember${valueRegex}(\\s|\$)" < "/etc/pam.d/common-password" ; then
                 echo "password \[success=[[:alnum:]].*\] pam_unix.so remember${defaultValue}" >> "/etc/pam.d/common-password"
             fi
         else
             echo "/etc/pam.d/common-password doesn't exist" >&2
         fi

         else
             >&2 echo 'Remediation is not applicable, nothing was done'
         fi
    fi

### Lock accounts after failed password attempts on ubuntu 22  #####

if grep jammy /etc/os-release; then
    # Remediation is applicable only in certain platforms
    if dpkg-query --show --showformat='${db:Status-Status}\n' 'libpam-runtime' 2>/dev/null | grep -q installed; then

        var_accounts_passwords_pam_faillock_deny='4'

        if [ -f /usr/bin/authselect ]; then
    if ! authselect check; then
            echo "
            authselect integrity check failed. Remediation aborted!
            This remediation could not be applied because an authselect profile was not selected or the selected profile is not intact.
            It is not recommended to manually edit the PAM files when authselect tool is available.
            In cases where the default authselect profile does not cover a specific demand, a custom authselect profile is recommended."
            exit 1
            fi
            authselect enable-feature with-faillock

            authselect apply-changes -b
            else

            pam_file="/etc/pam.d/common-auth"
            if ! grep -qE '^\s*auth\s+required\s+pam_faillock\.so\s+preauth.*$' "$pam_file" ; then
                sed -i --follow-symlinks '/^auth.*pam_unix\.so.*/i auth        required      pam_faillock.so preauth' "$pam_file"
            fi
            if ! grep -qE '^\s*auth\s+\[default=die\]\s+pam_faillock\.so\s+authfail.*$' "$pam_file" ; then
                num_lines=$(sed -n 's/^auth.*success=\([0-9]\).*pam_unix\.so.*/\1/p' "$pam_file")
                if [ ! -z "$num_lines" ]; then
                    echo "$num_lines"
                    pattern=""
                    for ((i=1; i <= num_lines; i++)); do
                        pattern="${pattern}n;"
                    done;
                    sed -i --follow-symlinks '/^auth.*pam_unix\.so.*/{'$pattern'a auth        [default=die]      pam_faillock.so authfail
             }' "$pam_file"
                else
                    sed -i --follow-symlinks '/^auth.*pam_unix\.so.*/a auth        [default=die]      pam_faillock.so authfail' "$pam_file"
                fi
            fi
            if ! grep -qE '^\s*auth\s+sufficient\s+pam_faillock\.so\s+authsucc.*$' "$pam_file" ; then
                sed -i --follow-symlinks '/^auth.*pam_faillock\.so.*authfail.*/a auth        sufficient      pam_faillock.so authsucc' "$pam_file"
            fi

            pam_file="/etc/pam.d/common-account"
            if ! grep -qE '^\s*account\s+required\s+pam_faillock\.so.*$' "$pam_file" ; then
                echo 'account   required     pam_faillock.so' >> "$pam_file"
            fi

            fi

            AUTH_FILES=("/etc/pam.d/common-auth" "/etc/pam.d/password-auth")

            FAILLOCK_CONF="/etc/security/faillock.conf"
            if [ -f $FAILLOCK_CONF ]; then
                regex="^\s*deny\s*="
                line="deny = $var_accounts_passwords_pam_faillock_deny"
                if ! grep -q $regex $FAILLOCK_CONF; then
                    echo $line >> $FAILLOCK_CONF
                else
                    sed -i --follow-symlinks 's|^\s*\(deny\s*=\s*\)\(\S\+\)|\1'"$var_accounts_passwords_pam_faillock_deny"'|g' $FAILLOCK_CONF
                fi
                for pam_file in "${AUTH_FILES[@]}"
                do
                    if [ -e "$pam_file" ] ; then
                        PAM_FILE_PATH="$pam_file"
                        if [ -f /usr/bin/authselect ]; then

                            if ! authselect check; then
                            echo "
                            authselect integrity check failed. Remediation aborted!
                            This remediation could not be applied because an authselect profile was not selected or the selected profile is not intact.
                            It is not recommended to manually edit the PAM files when authselect tool is available.
                            In cases where the default authselect profile does not cover a specific demand, a custom authselect profile is recommended."
                            exit 1
                            fi

                            CURRENT_PROFILE=$(authselect current -r | awk '{ print $1 }')
                            # If not already in use, a custom profile is created preserving the enabled features.
                            if [[ ! $CURRENT_PROFILE == custom/* ]]; then
                                ENABLED_FEATURES=$(authselect current | tail -n+3 | awk '{ print $2 }')
                                authselect create-profile hardening -b $CURRENT_PROFILE
                                CURRENT_PROFILE="custom/hardening"

                                authselect apply-changes -b --backup=before-hardening-custom-profile
                                authselect select $CURRENT_PROFILE
                                for feature in $ENABLED_FEATURES; do
                                    authselect enable-feature $feature;
                                done

                                authselect apply-changes -b --backup=after-hardening-custom-profile
                            fi
                            PAM_FILE_NAME=$(basename "$pam_file")
                            PAM_FILE_PATH="/etc/authselect/$CURRENT_PROFILE/$PAM_FILE_NAME"

                            authselect apply-changes -b
                        fi

                    if grep -qP '^\s*auth\s.*\bpam_faillock.so\s.*\bdeny\b' "$PAM_FILE_PATH"; then
                        sed -i -E --follow-symlinks 's/(.*auth.*pam_faillock.so.*)\bdeny\b=?[[:alnum:]]*(.*)/\1\2/g' "$PAM_FILE_PATH"
                    fi
                        if [ -f /usr/bin/authselect ]; then

                            authselect apply-changes -b
                        fi
                    else
                        echo "$pam_file was not found" >&2
                    fi
                done
            else
                for pam_file in "${AUTH_FILES[@]}"
                do
                    if ! grep -qE '^\s*auth.*pam_faillock\.so (preauth|authfail).*deny' "$pam_file"; then
                        sed -i --follow-symlinks '/^auth.*required.*pam_faillock\.so.*preauth.*silent.*/ s/$/ deny='"$var_accounts_passwords_pam_faillock_deny"'/' "$pam_file"
                        sed -i --follow-symlinks '/^auth.*required.*pam_faillock\.so.*authfail.*/ s/$/ deny='"$var_accounts_passwords_pam_faillock_deny"'/' "$pam_file"
                    else
                        sed -i --follow-symlinks 's/\(^auth.*required.*pam_faillock\.so.*preauth.*silent.*\)\('"deny"'=\)[0-9]\+\(.*\)/\1\2'"$var_accounts_passwords_pam_faillock_deny"'\3/' "$pam_file"
                        sed -i --follow-symlinks 's/\(^auth.*required.*pam_faillock\.so.*authfail.*\)\('"deny"'=\)[0-9]\+\(.*\)/\1\2'"$var_accounts_passwords_pam_faillock_deny"'\3/' "$pam_file"
                    fi
                done
            fi

         else
                >&2 echo 'Remediation is not applicable, nothing was done'
            fi

        fi

cp "./misc/passwords.list" "/usr/share/dict/passwords"
grep -v '^$' /usr/share/dict/passwords | strings > /usr/share/dict/passwords_text
update-cracklib

  ((SCRIPT_COUNT++))
}
